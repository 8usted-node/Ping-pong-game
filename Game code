import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class PingPongGame extends JFrame {
    private final int WIDTH = 800;
    private final int HEIGHT = 400;
    private final int PADDLE_WIDTH = 20;
    private final int PADDLE_HEIGHT = 80;
    private final int BALL_SIZE = 20;
    private int paddle1Y = HEIGHT / 2;
    private int paddle2Y = HEIGHT / 2;
    private int ballX = WIDTH / 2;
    private int ballY = HEIGHT / 2;
    private int ballXSpeed = -2;
    private int ballYSpeed = -2;

    public PingPongGame() {
        setTitle("Ping Pong Game");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setVisible(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e);
            }
        });
    }

    public void handleKeyPress(KeyEvent e) {
        int keyCode = e.getKeyCode();
        if (keyCode == KeyEvent.VK_UP && paddle2Y > 0) {
            paddle2Y -= 10;
        } else if (keyCode == KeyEvent.VK_DOWN && paddle2Y < HEIGHT - PADDLE_HEIGHT) {
            paddle2Y += 10;
        } else if (keyCode == KeyEvent.VK_W && paddle1Y > 0) {
            paddle1Y -= 10;
        } else if (keyCode == KeyEvent.VK_S && paddle1Y < HEIGHT - PADDLE_HEIGHT) {
            paddle1Y += 10;
        }
    }

    public void moveBall() {
        ballX += ballXSpeed;
        ballY += ballYSpeed;

        // Check for collisions with walls
        if (ballY >= HEIGHT - BALL_SIZE || ballY <= 0) {
            ballYSpeed *= -1;
        }

        // Check for collision with paddles
        if (ballX <= PADDLE_WIDTH && ballY + BALL_SIZE >= paddle1Y && ballY <= paddle1Y + PADDLE_HEIGHT) {
            ballXSpeed *= -1;
        } else if (ballX >= WIDTH - PADDLE_WIDTH - BALL_SIZE && ballY + BALL_SIZE >= paddle2Y && ballY <= paddle2Y + PADDLE_HEIGHT) {
            ballXSpeed *= -1;
        }

        // Check for scoring
        if (ballX < 0 || ballX > WIDTH) {
            JOptionPane.showMessageDialog(this, "Game Over!");
            System.exit(0);
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.BLACK);

        // Draw paddles
        g.fillRect(0, paddle1Y, PADDLE_WIDTH, PADDLE_HEIGHT);
        g.fillRect(WIDTH - PADDLE_WIDTH, paddle2Y, PADDLE_WIDTH, PADDLE_HEIGHT);

        // Draw ball
        g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);

        Toolkit.getDefaultToolkit().sync();
        g.dispose();
    }

    public void gameLoop() {
        while (true) {
            moveBall();
            repaint();
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        PingPongGame game = new PingPongGame();
        game.gameLoop();
    }
}
